-- Conversations table schema
-- Stores all messages and interactions within tickets
-- Last updated: 2024-01-21

-- Create updated_at trigger function if not exists
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ticket_id UUID REFERENCES tickets(id) ON DELETE CASCADE,
    sender_id UUID REFERENCES auth.users(id),
    message_type VARCHAR(20) CHECK (message_type IN (
        'customer', 'agent', 'ai_response', 'ai_suggestion', 'system'
    )),
    content TEXT NOT NULL,
    ai_generated BOOLEAN DEFAULT false,
    ai_confidence FLOAT,
    metadata JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    is_internal BOOLEAN DEFAULT false
);

-- Indexes
CREATE INDEX idx_conversations_ticket ON conversations(ticket_id);
CREATE INDEX idx_conversations_sender ON conversations(sender_id);
CREATE INDEX idx_conversations_type ON conversations(message_type);
CREATE INDEX idx_conversations_created ON conversations(created_at);

-- Add updated_at trigger
CREATE TRIGGER conversations_updated_at
    BEFORE UPDATE ON conversations
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();

-- Enable RLS
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view conversations of their tickets"
    ON conversations FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM tickets
            WHERE tickets.id = conversations.ticket_id
            AND (
                tickets.created_by = auth.uid()
                OR tickets.assigned_agent_id = auth.uid()
                OR EXISTS (
                    SELECT 1 FROM team_members
                    WHERE team_members.team_id = tickets.assigned_team_id
                    AND team_members.user_id = auth.uid()
                )
            )
        )
    );

CREATE POLICY "Users can create conversations on their tickets"
    ON conversations FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM tickets
            WHERE tickets.id = conversations.ticket_id
            AND (
                tickets.created_by = auth.uid()
                OR tickets.assigned_agent_id = auth.uid()
                OR EXISTS (
                    SELECT 1 FROM team_members
                    WHERE team_members.team_id = tickets.assigned_team_id
                    AND team_members.user_id = auth.uid()
                )
            )
        )
    );

CREATE POLICY "Only agents can see internal notes"
    ON conversations FOR SELECT
    USING (
        NOT is_internal
        OR EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- Comments
COMMENT ON TABLE conversations IS 'All messages and interactions within support tickets';
COMMENT ON COLUMN conversations.message_type IS 'Type of message: customer inquiry, agent response, AI suggestion, etc.';
COMMENT ON COLUMN conversations.ai_generated IS 'Whether this message was generated by AI';
COMMENT ON COLUMN conversations.ai_confidence IS 'Confidence score for AI-generated responses';
COMMENT ON COLUMN conversations.is_internal IS 'Whether this is an internal note not visible to customers'; 